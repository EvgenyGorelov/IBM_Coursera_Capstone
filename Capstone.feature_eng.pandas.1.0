{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "\n",
    "# Advanced Data Science Capstone\n",
    "\n",
    "## Correlation of air pollution and Prevalence of Heart failures in Germany  \n",
    "\n",
    "## Feature Creation and Feature engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The deliverables\n",
    "The deliverables of the current stage:\n",
    "\n",
    " - Pandas dataframe with disease prevalence column(s), county id, and some features extracted from air pollution data series for sensors located in corresponding county\n",
    "\n",
    "###  Feature creation\n",
    "The basic features for air pollution levels are\n",
    "\n",
    " - Number of hours when pollutant concentration exceeded some certain value\n",
    " - Mean or Median concentration of the pollutant\n",
    " \n",
    "###  Feature quality check\n",
    "\n",
    " - Feature variance\n",
    " - Feature cross-correlation matrix\n",
    " \n",
    " First of all the necessary libraries and the datasets preprocessed at the ETL stage loaded:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Libreries:\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import re\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Files:\n",
    "SensorLocation = pd.read_csv('Capstone.ETL/Capstone.etl.SensorLocationCSV.1.0.csv')\n",
    "dfHeart = pd.read_csv('Capstone.ETL/Capstone.etl.dfHeartCSV.1.0.csv')\n",
    "dffAll = pd.read_csv('Capstone.ETL/Capstone.etl.wideCSV.1.0.gzip', compression='gzip', index_col=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Feature creation\n",
    "\n",
    "Now let's create some basic features, illustrating some integral quantities of air pollution over the year.\n",
    "For the start the following features will be generated:\n",
    " - Average concentration of every kind of pollutant over the year (average over all sensors within the county)\n",
    " - 75th percentile of every kind pollutant over the year, that is also proportional to the number of days when pollutant concentration exceeded some certain value\n",
    "\n",
    "#### Mean pollutant concentration over the year\n",
    "The quantity can be easily extracted using *.describe()* method of the dataframe:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "dffAllSummary=dffAll.describe()\n",
    "\n",
    "def MeanByPollutantCountyID(Pollutant, CountyID):\n",
    "    PollutantMasc='^.{8}' + Pollutant + '_'\n",
    "# collecting set of all sensors in the given county:    \n",
    "    CountyStationSet = SensorLocation.loc[SensorLocation['countyid']==CountyID]['SensorID'].tolist()\n",
    "    if CountyStationSet == []:\n",
    "        return(np.nan)\n",
    "    try:\n",
    "        dffAllPollutantCountyID = dffAllSummary[[col for col in dffAllSummary.columns if re.search('(^.{7})',col).group(1) in CountyStationSet]].filter(regex=PollutantMasc,axis=1)\n",
    "        return(dffAllPollutantCountyID.loc[['mean']].mean(axis=1))\n",
    "    except:    \n",
    "        return(np.nan)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "ListOfPollutants = ['CO','NO','NO2','NOx','O3','PM1','PM2', 'PM10', 'SO2', 'CHB', 'CH4', 'C8H10', 'CHT', 'CO2']\n",
    "\n",
    "for pollutant in ListOfPollutants:\n",
    "    ColIndex=pollutant+'mean'\n",
    "    dfHeart[ColIndex] =dfHeart.apply(lambda x: MeanByPollutantCountyID(pollutant, x['Regions-ID']), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Region          0\n",
       "Regions-ID      0\n",
       "KV              0\n",
       "Kreistyp        0\n",
       "Wert            0\n",
       "Bundeswert      0\n",
       "COmean        336\n",
       "NOmean        186\n",
       "NO2mean       185\n",
       "NOxmean       212\n",
       "O3mean        206\n",
       "PM1mean       197\n",
       "PM2mean       297\n",
       "PM10mean      402\n",
       "SO2mean       314\n",
       "CHBmean       385\n",
       "CH4mean       392\n",
       "C8H10mean     398\n",
       "CHTmean       385\n",
       "CO2mean       396\n",
       "dtype: int64"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#dfHeart.head(53)\n",
    "dfHeart.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the table above one can see, that only 6 pollutants (*NO, NO2, NOx, O3, PM1, PM2*) were measured in about a half of german counties (total number of counties mentioned in the *heart failures* dataset is 402). Let's take a look, in how many counties all 6 pollutants were measured simultaneously:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [],
   "source": [
    "FeatureSetDenseMean = dfHeart[['Regions-ID','Wert','NOmean','NO2mean','NOxmean','O3mean','PM1mean']].dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Regions-ID</th>\n",
       "      <th>Wert</th>\n",
       "      <th>NOmean</th>\n",
       "      <th>NO2mean</th>\n",
       "      <th>NOxmean</th>\n",
       "      <th>O3mean</th>\n",
       "      <th>PM1mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>145.000000</td>\n",
       "      <td>145.000000</td>\n",
       "      <td>145.000000</td>\n",
       "      <td>145.000000</td>\n",
       "      <td>145.000000</td>\n",
       "      <td>145.000000</td>\n",
       "      <td>145.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>8855.641379</td>\n",
       "      <td>3.211517</td>\n",
       "      <td>10.573647</td>\n",
       "      <td>18.738468</td>\n",
       "      <td>34.209940</td>\n",
       "      <td>48.683125</td>\n",
       "      <td>16.326688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4519.795404</td>\n",
       "      <td>1.029521</td>\n",
       "      <td>10.370152</td>\n",
       "      <td>10.025046</td>\n",
       "      <td>25.472331</td>\n",
       "      <td>8.318806</td>\n",
       "      <td>3.281222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1002.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>-0.168340</td>\n",
       "      <td>4.256108</td>\n",
       "      <td>2.356005</td>\n",
       "      <td>33.445765</td>\n",
       "      <td>7.480554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5316.000000</td>\n",
       "      <td>2.530000</td>\n",
       "      <td>2.132103</td>\n",
       "      <td>9.910251</td>\n",
       "      <td>12.886057</td>\n",
       "      <td>42.920124</td>\n",
       "      <td>14.181515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7314.000000</td>\n",
       "      <td>2.990000</td>\n",
       "      <td>6.080534</td>\n",
       "      <td>16.198489</td>\n",
       "      <td>26.258959</td>\n",
       "      <td>47.588332</td>\n",
       "      <td>16.410518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>13071.000000</td>\n",
       "      <td>3.610000</td>\n",
       "      <td>16.381506</td>\n",
       "      <td>26.500574</td>\n",
       "      <td>49.668345</td>\n",
       "      <td>52.285596</td>\n",
       "      <td>18.692275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>16077.000000</td>\n",
       "      <td>6.160000</td>\n",
       "      <td>39.808819</td>\n",
       "      <td>42.477908</td>\n",
       "      <td>100.943063</td>\n",
       "      <td>71.032766</td>\n",
       "      <td>23.129197</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Regions-ID        Wert      NOmean     NO2mean     NOxmean  \\\n",
       "count    145.000000  145.000000  145.000000  145.000000  145.000000   \n",
       "mean    8855.641379    3.211517   10.573647   18.738468   34.209940   \n",
       "std     4519.795404    1.029521   10.370152   10.025046   25.472331   \n",
       "min     1002.000000    1.500000   -0.168340    4.256108    2.356005   \n",
       "25%     5316.000000    2.530000    2.132103    9.910251   12.886057   \n",
       "50%     7314.000000    2.990000    6.080534   16.198489   26.258959   \n",
       "75%    13071.000000    3.610000   16.381506   26.500574   49.668345   \n",
       "max    16077.000000    6.160000   39.808819   42.477908  100.943063   \n",
       "\n",
       "           O3mean     PM1mean  \n",
       "count  145.000000  145.000000  \n",
       "mean    48.683125   16.326688  \n",
       "std      8.318806    3.281222  \n",
       "min     33.445765    7.480554  \n",
       "25%     42.920124   14.181515  \n",
       "50%     47.588332   16.410518  \n",
       "75%     52.285596   18.692275  \n",
       "max     71.032766   23.129197  "
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "FeatureSetDenseMean.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the table above one can conclude, that despite only about a third of german counties are included into the **FeatureSetDense** dataset, all the measured quantities have good variability. In order to illustrate it, the histograms are plotted:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "FeatureSetDenseMean.hist(column=['NOmean','NO2mean','NOxmean','O3mean','PM1mean']);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also maximize number of counties in the dataset, removing 2 of 5 pollutants. It is found, that for the current dataset it will lead to increase of observations up to 199, almost a half of the counties:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Regions-ID</th>\n",
       "      <th>Wert</th>\n",
       "      <th>NOmean</th>\n",
       "      <th>NO2mean</th>\n",
       "      <th>PM1mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>199.000000</td>\n",
       "      <td>199.000000</td>\n",
       "      <td>199.000000</td>\n",
       "      <td>199.000000</td>\n",
       "      <td>199.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>8718.924623</td>\n",
       "      <td>3.110101</td>\n",
       "      <td>12.759736</td>\n",
       "      <td>20.944777</td>\n",
       "      <td>16.755053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4126.990729</td>\n",
       "      <td>0.977749</td>\n",
       "      <td>12.067941</td>\n",
       "      <td>10.465006</td>\n",
       "      <td>3.302339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1001.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>-0.168340</td>\n",
       "      <td>4.256108</td>\n",
       "      <td>7.480554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5558.000000</td>\n",
       "      <td>2.470000</td>\n",
       "      <td>2.979331</td>\n",
       "      <td>12.436634</td>\n",
       "      <td>15.136501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>8211.000000</td>\n",
       "      <td>2.850000</td>\n",
       "      <td>9.558106</td>\n",
       "      <td>20.293349</td>\n",
       "      <td>16.819445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>12064.500000</td>\n",
       "      <td>3.480000</td>\n",
       "      <td>19.224991</td>\n",
       "      <td>28.124039</td>\n",
       "      <td>18.824887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>16077.000000</td>\n",
       "      <td>6.160000</td>\n",
       "      <td>61.891300</td>\n",
       "      <td>56.669541</td>\n",
       "      <td>28.321903</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Regions-ID        Wert      NOmean     NO2mean     PM1mean\n",
       "count    199.000000  199.000000  199.000000  199.000000  199.000000\n",
       "mean    8718.924623    3.110101   12.759736   20.944777   16.755053\n",
       "std     4126.990729    0.977749   12.067941   10.465006    3.302339\n",
       "min     1001.000000    1.500000   -0.168340    4.256108    7.480554\n",
       "25%     5558.000000    2.470000    2.979331   12.436634   15.136501\n",
       "50%     8211.000000    2.850000    9.558106   20.293349   16.819445\n",
       "75%    12064.500000    3.480000   19.224991   28.124039   18.824887\n",
       "max    16077.000000    6.160000   61.891300   56.669541   28.321903"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "FeatureSetLongMean = dfHeart[['Regions-ID','Wert','NOmean','NO2mean','PM1mean']].dropna()\n",
    "FeatureSetLongMean.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Quantile-based feature\n",
    "Constructing the global distribution of selected pollutant concentration over all counties,\n",
    "one can find e.g. 75th quantile of this pollutant concentration distribution, \n",
    "and than count number of hours, when this concentration was exceeded in each county.\n",
    "This quantity is some generalization of the *\"number of days when the pollutant limit has been exceeded\"* quantity, because it tune itself to pollution levels available in the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function for Croppind of initial dffAll dataset to columns reflecting measurements \n",
    "# of pollutants in ListOfPollutants at counties in ListOfCountyIDs:\n",
    "def CropPollutantsIDsTS(ListOfPollutants, ListOfCountyIDs):\n",
    "    CountyStationSet=[]\n",
    "    dffAllCrop=pd.DataFrame(dffAll['observation_period'])\n",
    "    for CountyID in ListOfCountyIDs:\n",
    "        CountyStationSet.extend(SensorLocation.loc[SensorLocation['countyid']==CountyID]['SensorID'].tolist())\n",
    "    for Pollutant in ListOfPollutants:\n",
    "        PollutantMasc='^.{8}' + Pollutant + '_'\n",
    "        dffAllCrop=dffAllCrop.join(dffAll[[col for col in dffAll.columns if re.search('(^.{7})',col).group(1) in CountyStationSet]].filter(regex=PollutantMasc,axis=1))\n",
    "    return(dffAllCrop)\n",
    "\n",
    "def ReturnNthPercentilePollutantsIDsTS(Percentile, ListOfPollutants, ListOfCountyIDs):\n",
    "    CountyStationSet=[]\n",
    "    tmpPercentile=[]\n",
    "    NthPercentile=pd.DataFrame(index=ListOfPollutants)\n",
    "\n",
    "    for CountyID in ListOfCountyIDs:\n",
    "        CountyStationSet.extend(SensorLocation.loc[SensorLocation['countyid']==CountyID]['SensorID'].tolist())\n",
    "    for Pollutant in ListOfPollutants:\n",
    "        PollutantMasc='^.{8}' + Pollutant + '_'\n",
    "        tmpPercentile.append((dffAll[[col for col in dffAll.columns if re.search('(^.{7})',col).group(1) in CountyStationSet]].filter(regex=PollutantMasc,axis=1)).stack().reset_index(drop=True).quantile(Percentile/100.0))\n",
    "    NthPercentile['Percentile']=tmpPercentile\n",
    "    return(NthPercentile)\n",
    "        \n",
    "#ListOfPollutantsDense = ['NO','NO2','NOx','O3','PM1']\n",
    "#ListOfCountyIDsDense = FeatureSetDenseMean['Regions-ID']\n",
    "#dffAllDense=CropPollutantsIDsTS(ListOfPollutantsDense, ListOfCountyIDsDense)\n",
    "\n",
    "#ListOfPollutantsLong = ['NO','NO2','PM1']\n",
    "#ListOfCountyIDsLong = FeatureSetDenseMean['Regions-ID']\n",
    "#dffAllLong=CropPollutantsIDsTS(ListOfPollutantsLong, ListOfCountyIDsLong)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Percentile</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>NO</th>\n",
       "      <td>1.773000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NO2</th>\n",
       "      <td>15.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOx</th>\n",
       "      <td>19.055446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>O3</th>\n",
       "      <td>49.323000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PM1</th>\n",
       "      <td>13.306000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Percentile\n",
       "NO     1.773000\n",
       "NO2   15.500000\n",
       "NOx   19.055446\n",
       "O3    49.323000\n",
       "PM1   13.306000"
      ]
     },
     "execution_count": 301,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ReturnNthPercentilePollutantsIDsTS(50,['NO','NO2','NOx','O3','PM1'],FeatureSetDenseMean['Regions-ID'])\n",
    "#NthPercentile=pd.DataFrame(index=['NO','NO2','NOx','O3','PM1'], columns=['Percentile'])\n",
    "#NthPercentile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['DEST011',\n",
       " 'DEST039',\n",
       " 'DEST044',\n",
       " 'DEST098',\n",
       " 'DEST101',\n",
       " 'DETH091',\n",
       " 'DETH094',\n",
       " 'DETH095',\n",
       " 'DETH100',\n",
       " 'DETH005',\n",
       " 'DESN001',\n",
       " 'DESN049',\n",
       " 'DESN053',\n",
       " 'DERP013',\n",
       " 'DENI031',\n",
       " 'DERP014',\n",
       " 'DEST015',\n",
       " 'DEST068',\n",
       " 'DEST104',\n",
       " 'DETH018',\n",
       " 'DEST080',\n",
       " 'DEST090',\n",
       " 'DETH042',\n",
       " 'DENI070',\n",
       " 'DEST066',\n",
       " 'DEST092',\n",
       " 'DENI053',\n",
       " 'DERP017',\n",
       " 'DERP015',\n",
       " 'DEST002',\n",
       " 'DETH013',\n",
       " 'DETH020',\n",
       " 'DETH043',\n",
       " 'DETH081',\n",
       " 'DETH099',\n",
       " 'DETH117',\n",
       " 'DETH027',\n",
       " 'DETH026',\n",
       " 'DETH060',\n",
       " 'DETH036',\n",
       " 'DEST050',\n",
       " 'DEST072',\n",
       " 'DEST074',\n",
       " 'DEST075',\n",
       " 'DEST102',\n",
       " 'DEST063',\n",
       " 'DEST105',\n",
       " 'DEST028',\n",
       " 'DEST078',\n",
       " 'DEST081',\n",
       " 'DEST108',\n",
       " 'DEBB007',\n",
       " 'DEST006',\n",
       " 'DEST057',\n",
       " 'DEST076',\n",
       " 'DEST077',\n",
       " 'DEST099',\n",
       " 'DEST103',\n",
       " 'DEST112',\n",
       " 'DESN024',\n",
       " 'DESN075',\n",
       " 'DESN081',\n",
       " 'DESN093',\n",
       " 'DESN012',\n",
       " 'DESN076',\n",
       " 'DESN080',\n",
       " 'DETH061',\n",
       " 'DETH041',\n",
       " 'DETH075',\n",
       " 'DETH082',\n",
       " 'DESN020',\n",
       " 'DESN045',\n",
       " 'DESN079',\n",
       " 'DEMV003',\n",
       " 'DEMV024',\n",
       " 'DEBB077',\n",
       " 'DEUB030',\n",
       " 'DENI008',\n",
       " 'DENI011',\n",
       " 'DENI075',\n",
       " 'DENI160',\n",
       " 'DESN051',\n",
       " 'DERP034',\n",
       " 'DERP042',\n",
       " 'DERP060',\n",
       " 'DETH072',\n",
       " 'DETH102',\n",
       " 'DEUB029',\n",
       " 'DEBW197',\n",
       " 'DEBY072',\n",
       " 'DEHE024',\n",
       " 'DENI019',\n",
       " 'DENI077',\n",
       " 'DEBB056',\n",
       " 'DEBB067',\n",
       " 'DEBB088',\n",
       " 'DEMV017',\n",
       " 'DEMV018',\n",
       " 'DEBY188',\n",
       " 'DEMV004',\n",
       " 'DEMV007',\n",
       " 'DEMV019',\n",
       " 'DENI052',\n",
       " 'DEBB066',\n",
       " 'DEBB082',\n",
       " 'DEMV023',\n",
       " 'DEST069',\n",
       " 'DEST089',\n",
       " 'DETH011',\n",
       " 'DEBB026',\n",
       " 'DEBB079',\n",
       " 'DEBB083',\n",
       " 'DEBB085',\n",
       " 'DESN017',\n",
       " 'DESN074',\n",
       " 'DESN004',\n",
       " 'DESN050',\n",
       " 'DEHE051',\n",
       " 'DEHE058',\n",
       " 'DEHE059',\n",
       " 'DEHE097',\n",
       " 'DEHE134',\n",
       " 'DETH009',\n",
       " 'DETH097',\n",
       " 'DETH098',\n",
       " 'DERP001',\n",
       " 'DERP002',\n",
       " 'DERP003',\n",
       " 'DERP041',\n",
       " 'DEBB029',\n",
       " 'DEHB005',\n",
       " 'DEHB011',\n",
       " 'DEHE046',\n",
       " 'DEHE060',\n",
       " 'DEHE032',\n",
       " 'DEHE039',\n",
       " 'DEBY068',\n",
       " 'DEBB086',\n",
       " 'DEBB032',\n",
       " 'DEBB084',\n",
       " 'DEHE020',\n",
       " 'DEHE057',\n",
       " 'DEHE081',\n",
       " 'DEHE082',\n",
       " 'DEHE083',\n",
       " 'DEHE084',\n",
       " 'DEHE095',\n",
       " 'DEHE105',\n",
       " 'DENI016',\n",
       " 'DENI051',\n",
       " 'DEBY006',\n",
       " 'DEBY007',\n",
       " 'DEBY099',\n",
       " 'DEBY110',\n",
       " 'DESH011',\n",
       " 'DESH015',\n",
       " 'DESH025',\n",
       " 'DEHE050',\n",
       " 'DERP016',\n",
       " 'DERP019',\n",
       " 'DERP035',\n",
       " 'DENI038',\n",
       " 'DENI067',\n",
       " 'DENI144',\n",
       " 'DENI145',\n",
       " 'DENI146',\n",
       " 'DEBY076',\n",
       " 'DEBY077',\n",
       " 'DEBY119',\n",
       " 'DENI043',\n",
       " 'DEBW195',\n",
       " 'DENI048',\n",
       " 'DENI054',\n",
       " 'DENI149',\n",
       " 'DENI150',\n",
       " 'DENI151',\n",
       " 'DENI152',\n",
       " 'DENI153',\n",
       " 'DESN011',\n",
       " 'DESN060',\n",
       " 'DESN083',\n",
       " 'DESN104',\n",
       " 'DESN061',\n",
       " 'DESN084',\n",
       " 'DESN092',\n",
       " 'DENI058',\n",
       " 'DERP023',\n",
       " 'DENW064',\n",
       " 'DENW094',\n",
       " 'DENW178',\n",
       " 'DENW207',\n",
       " 'DENW245',\n",
       " 'DENW287',\n",
       " 'DENW371',\n",
       " 'DERP025',\n",
       " 'DEBY052',\n",
       " 'DEUB005',\n",
       " 'DERP020',\n",
       " 'DERP036',\n",
       " 'DERP040',\n",
       " 'DERP047',\n",
       " 'DENW008',\n",
       " 'DENW101',\n",
       " 'DENW136',\n",
       " 'DENW184',\n",
       " 'DENW185',\n",
       " 'DEBB063',\n",
       " 'DESH008',\n",
       " 'DEBY122',\n",
       " 'DENI020',\n",
       " 'DENI157',\n",
       " 'DENI158',\n",
       " 'DENI159',\n",
       " 'DEBY056',\n",
       " 'DEHE028',\n",
       " 'DEHE113',\n",
       " 'DEHE114',\n",
       " 'DEHE133',\n",
       " 'DENI041',\n",
       " 'DENW021',\n",
       " 'DENW118',\n",
       " 'DENW119',\n",
       " 'DENW120',\n",
       " 'DENW121',\n",
       " 'DENW201',\n",
       " 'DENW234',\n",
       " 'DENW364',\n",
       " 'DEMV012',\n",
       " 'DEMV027',\n",
       " 'DENW079',\n",
       " 'DENW355',\n",
       " 'DEHE045',\n",
       " 'DEHE115',\n",
       " 'DENW081',\n",
       " 'DEHE044',\n",
       " 'DEHE098',\n",
       " 'DEHE099',\n",
       " 'DEHE100',\n",
       " 'DEHE101',\n",
       " 'DENW034',\n",
       " 'DENW040',\n",
       " 'DENW102',\n",
       " 'DENW112',\n",
       " 'DENW131',\n",
       " 'DENW194',\n",
       " 'DENW253',\n",
       " 'DENW254',\n",
       " 'DENW309',\n",
       " 'DENW338',\n",
       " 'DENW376',\n",
       " 'DENW377',\n",
       " 'DENW024',\n",
       " 'DENW043',\n",
       " 'DENW134',\n",
       " 'DENW135',\n",
       " 'DENW161',\n",
       " 'DENW162',\n",
       " 'DENW168',\n",
       " 'DENW169',\n",
       " 'DENW171',\n",
       " 'DENW215',\n",
       " 'DENW247',\n",
       " 'DENW276',\n",
       " 'DENW277',\n",
       " 'DEMV020',\n",
       " 'DEMV021',\n",
       " 'DEMV022',\n",
       " 'DEMV031',\n",
       " 'DEMV006',\n",
       " 'DEMV025',\n",
       " 'DEMV026',\n",
       " 'DEUB028',\n",
       " 'DEBB053',\n",
       " 'DESN025',\n",
       " 'DESN059',\n",
       " 'DESN077',\n",
       " 'DESN082',\n",
       " 'DENI060',\n",
       " 'DENW078',\n",
       " 'DENW256',\n",
       " 'DENW291',\n",
       " 'DENW030',\n",
       " 'DENW224',\n",
       " 'DENW262',\n",
       " 'DENW275',\n",
       " 'DENW293',\n",
       " 'DENW307',\n",
       " 'DEHE013',\n",
       " 'DEHE049',\n",
       " 'DEHE085',\n",
       " 'DEHE086',\n",
       " 'DEHE087',\n",
       " 'DEHE088',\n",
       " 'DESH014',\n",
       " 'DEUB001',\n",
       " 'DEBY053',\n",
       " 'DEBY054',\n",
       " 'DEBY058',\n",
       " 'DEBY120',\n",
       " 'DENW068',\n",
       " 'DENW181',\n",
       " 'DENW210',\n",
       " 'DEBB048',\n",
       " 'DEBB078',\n",
       " 'DENW114',\n",
       " 'DENW189',\n",
       " 'DENW058',\n",
       " 'DENW267',\n",
       " 'DEHE030',\n",
       " 'DEHE062',\n",
       " 'DEBW149',\n",
       " 'DERP021',\n",
       " 'DERP044',\n",
       " 'DERP046',\n",
       " 'DESH027',\n",
       " 'DESH033',\n",
       " 'DESH052',\n",
       " 'DESH057',\n",
       " 'DENI062',\n",
       " 'DENW065',\n",
       " 'DENW167',\n",
       " 'DENW272',\n",
       " 'DENW360',\n",
       " 'DENW053',\n",
       " 'DENW059',\n",
       " 'DENW147',\n",
       " 'DENW148',\n",
       " 'DENW149',\n",
       " 'DENW151',\n",
       " 'DENW152',\n",
       " 'DENW153',\n",
       " 'DENW164',\n",
       " 'DENW198',\n",
       " 'DENW211',\n",
       " 'DENW212',\n",
       " 'DENW219',\n",
       " 'DENW249',\n",
       " 'DENW250',\n",
       " 'DENW288',\n",
       " 'DENW297',\n",
       " 'DENW302',\n",
       " 'DENW303',\n",
       " 'DENW304',\n",
       " 'DENW332',\n",
       " 'DENW336',\n",
       " 'DENW353',\n",
       " 'DENW358',\n",
       " 'DENW095',\n",
       " 'DENW156',\n",
       " 'DENW260',\n",
       " 'DENW268',\n",
       " 'DENW269',\n",
       " 'DEBB042',\n",
       " 'DEBB045',\n",
       " 'DEBB092',\n",
       " 'DENI059',\n",
       " 'DEHE011',\n",
       " 'DEHE026',\n",
       " 'DEHE054',\n",
       " 'DEHE073',\n",
       " 'DEHE074',\n",
       " 'DEHE075',\n",
       " 'DEHE076',\n",
       " 'DEHE077',\n",
       " 'DEHE078',\n",
       " 'DEHE079',\n",
       " 'DEHE080',\n",
       " 'DENW096',\n",
       " 'DENW100',\n",
       " 'DENW165',\n",
       " 'DENW259',\n",
       " 'DESH023',\n",
       " 'DESH026',\n",
       " 'DESH053',\n",
       " 'DENW042',\n",
       " 'DENW115',\n",
       " 'DENW116',\n",
       " 'DENW251',\n",
       " 'DENW252',\n",
       " 'DENW261',\n",
       " 'DEBB021',\n",
       " 'DEBB054',\n",
       " 'DEBB073',\n",
       " 'DEBB075',\n",
       " 'DENW071',\n",
       " 'DENW082',\n",
       " 'DENW216',\n",
       " 'DENW340',\n",
       " 'DENW354',\n",
       " 'DENW368',\n",
       " 'DENW370',\n",
       " 'DEBY088',\n",
       " 'DEBB065',\n",
       " 'DEBY037',\n",
       " 'DEBY039',\n",
       " 'DEBY043',\n",
       " 'DEBY089',\n",
       " 'DEBY114',\n",
       " 'DEBY115',\n",
       " 'DEBY189',\n",
       " 'DEBB044',\n",
       " 'DEBB064',\n",
       " 'DEBB076',\n",
       " 'DEBB087',\n",
       " 'DENW006',\n",
       " 'DENW010',\n",
       " 'DENW179',\n",
       " 'DENW230',\n",
       " 'DENW231',\n",
       " 'DENW246',\n",
       " 'DENW265',\n",
       " 'DENW270',\n",
       " 'DENW271',\n",
       " 'DENW282',\n",
       " 'DENW292',\n",
       " 'DENW306',\n",
       " 'DENW365',\n",
       " 'DEBW027',\n",
       " 'DEBW087',\n",
       " 'DEBW147',\n",
       " 'DEBW227',\n",
       " 'DENW038',\n",
       " 'DENW187',\n",
       " 'DENW301',\n",
       " 'DENW305',\n",
       " 'DEBY109',\n",
       " 'DENI063',\n",
       " 'DEHE052',\n",
       " 'DENW080',\n",
       " 'DENW206',\n",
       " 'DENW067',\n",
       " 'DENW186',\n",
       " 'DENW200',\n",
       " 'DENW228',\n",
       " 'DENW361',\n",
       " 'DEBB049',\n",
       " 'DEBB055',\n",
       " 'DENI029',\n",
       " 'DEHE022',\n",
       " 'DEHE037',\n",
       " 'DEHE089',\n",
       " 'DEHE090',\n",
       " 'DEHE091',\n",
       " 'DEHE092',\n",
       " 'DEHE112',\n",
       " 'DEHE005',\n",
       " 'DEHE008',\n",
       " 'DEHE009',\n",
       " 'DEHE036',\n",
       " 'DEHE041',\n",
       " 'DEHE053',\n",
       " 'DEHE056',\n",
       " 'DEHE065',\n",
       " 'DEHE066',\n",
       " 'DEHE067',\n",
       " 'DEHE068',\n",
       " 'DEHE069',\n",
       " 'DEHE070',\n",
       " 'DEHE071',\n",
       " 'DEHE072',\n",
       " 'DEHE096',\n",
       " 'DEHE135',\n",
       " 'DERP007',\n",
       " 'DERP008',\n",
       " 'DERP009',\n",
       " 'DERP010',\n",
       " 'DERP011',\n",
       " 'DERP012',\n",
       " 'DEHE001',\n",
       " 'DEHE040',\n",
       " 'DEHE130',\n",
       " 'DEHE132',\n",
       " 'DEHE018',\n",
       " 'DEHE043',\n",
       " 'DEBW073',\n",
       " 'DEUB004',\n",
       " 'DERP024',\n",
       " 'DERP045',\n",
       " 'DERP063']"
      ]
     },
     "execution_count": 267,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#[[col for col in dffAll.columns if re.search('(^.{7})',col).group(1) in CountyStationSet]]\n",
    "CountyStationSet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8760, 1)"
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dffAllCrop.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [],
   "source": [
    "dffAllDense=pd.DataFrame(dffAll['observation_period'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>observation_period</th>\n",
       "      <th>DEBY006_NO_dataGroup1</th>\n",
       "      <th>DEBY007_NO_dataGroup1</th>\n",
       "      <th>DEBY037_NO_dataGroup1</th>\n",
       "      <th>DEBY039_NO_dataGroup1</th>\n",
       "      <th>DEBY052_NO_dataGroup1</th>\n",
       "      <th>DEBY053_NO_dataGroup1</th>\n",
       "      <th>DEBY058_NO_dataGroup1</th>\n",
       "      <th>DEBY068_NO_dataGroup1</th>\n",
       "      <th>DEBY072_NO_dataGroup1</th>\n",
       "      <th>...</th>\n",
       "      <th>DEBB063_PM1_dataGroup1</th>\n",
       "      <th>DEBB064_PM1_dataGroup1</th>\n",
       "      <th>DEBB065_PM1_dataGroup1</th>\n",
       "      <th>DEBB066_PM1_dataGroup1</th>\n",
       "      <th>DEBB067_PM1_dataGroup1</th>\n",
       "      <th>DEBB073_PM1_dataGroup1</th>\n",
       "      <th>DEBB075_PM1_dataGroup1</th>\n",
       "      <th>DEBB083_PM1_dataGroup1</th>\n",
       "      <th>DEBB086_PM1_dataGroup1</th>\n",
       "      <th>DEBB092_PM1_dataGroup1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-01-01 00:00</td>\n",
       "      <td>27.516926</td>\n",
       "      <td>53.046135</td>\n",
       "      <td>286.025635</td>\n",
       "      <td>148.978470</td>\n",
       "      <td>22.766479</td>\n",
       "      <td>98.250511</td>\n",
       "      <td>78.897690</td>\n",
       "      <td>21.211472</td>\n",
       "      <td>0.3741</td>\n",
       "      <td>...</td>\n",
       "      <td>45.74</td>\n",
       "      <td>144.29</td>\n",
       "      <td>13.71</td>\n",
       "      <td>21.45</td>\n",
       "      <td>69.44</td>\n",
       "      <td>381.57</td>\n",
       "      <td>72.16</td>\n",
       "      <td>163.17</td>\n",
       "      <td>110.65</td>\n",
       "      <td>124.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-01-01 01:00</td>\n",
       "      <td>20.476986</td>\n",
       "      <td>18.547878</td>\n",
       "      <td>302.326416</td>\n",
       "      <td>190.376373</td>\n",
       "      <td>6.412074</td>\n",
       "      <td>60.008133</td>\n",
       "      <td>50.532806</td>\n",
       "      <td>20.755692</td>\n",
       "      <td>0.3741</td>\n",
       "      <td>...</td>\n",
       "      <td>23.57</td>\n",
       "      <td>43.44</td>\n",
       "      <td>15.68</td>\n",
       "      <td>24.51</td>\n",
       "      <td>29.40</td>\n",
       "      <td>41.77</td>\n",
       "      <td>52.25</td>\n",
       "      <td>88.07</td>\n",
       "      <td>38.29</td>\n",
       "      <td>31.84</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 1180 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  observation_period  DEBY006_NO_dataGroup1  DEBY007_NO_dataGroup1  \\\n",
       "0   2017-01-01 00:00              27.516926              53.046135   \n",
       "1   2017-01-01 01:00              20.476986              18.547878   \n",
       "\n",
       "   DEBY037_NO_dataGroup1  DEBY039_NO_dataGroup1  DEBY052_NO_dataGroup1  \\\n",
       "0             286.025635             148.978470              22.766479   \n",
       "1             302.326416             190.376373               6.412074   \n",
       "\n",
       "   DEBY053_NO_dataGroup1  DEBY058_NO_dataGroup1  DEBY068_NO_dataGroup1  \\\n",
       "0              98.250511              78.897690              21.211472   \n",
       "1              60.008133              50.532806              20.755692   \n",
       "\n",
       "   DEBY072_NO_dataGroup1  ...  DEBB063_PM1_dataGroup1  DEBB064_PM1_dataGroup1  \\\n",
       "0                 0.3741  ...                   45.74                  144.29   \n",
       "1                 0.3741  ...                   23.57                   43.44   \n",
       "\n",
       "   DEBB065_PM1_dataGroup1  DEBB066_PM1_dataGroup1  DEBB067_PM1_dataGroup1  \\\n",
       "0                   13.71                   21.45                   69.44   \n",
       "1                   15.68                   24.51                   29.40   \n",
       "\n",
       "   DEBB073_PM1_dataGroup1  DEBB075_PM1_dataGroup1  DEBB083_PM1_dataGroup1  \\\n",
       "0                  381.57                   72.16                  163.17   \n",
       "1                   41.77                   52.25                   88.07   \n",
       "\n",
       "   DEBB086_PM1_dataGroup1  DEBB092_PM1_dataGroup1  \n",
       "0                  110.65                  124.60  \n",
       "1                   38.29                   31.84  \n",
       "\n",
       "[2 rows x 1180 columns]"
      ]
     },
     "execution_count": 231,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dffAllDense.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
